						操作系统引导
===os===
是一种程序，以数据的形式存放在硬盘中，硬盘通常分为多个区，一台计算机又有多个或多种外部存储设备

===os引导===
指计算机利用cpu运行特定程序，通过程序识别硬盘，识别硬盘分区，识别硬盘分区上的os，最后通过程序启动os
						
===引导过程===
1、激活CPU：
	cpu读取ROM中的boot(启动)程序，开始执行BIOS指令
2、硬件自检：
	启动BIOS程序后自检，有故障：蜂鸣；无故障：显示cpu、内存、硬盘等信息
3、加载带有os的硬盘：
	BIOS读取boot sequence(启动顺序)，将控制权交给启动顺序第一位存储设备，cpu将该存储设备引导扇区的内容加载到内存中
4、加载主引导记录MBR：
	告诉cpu去硬盘的哪个主分区去找os(若无引导硬盘，死机)
5、扫描硬盘分区表，并加载硬盘活动分区：
	MBR扫描硬盘分区表，找到硬盘活动分区(含有os的分区)，加载活动分区，将控制权交给活动分区
6、加载分区引导记录PBR：
	读取活动分区的第一个扇区(分区引导记录PBR)
7、加载启动管理器
	PBR寻找并激活分区根目录下用于引导os的程序(启动管理器)
8、加载os


1）执行顺序依次是 ROM 中的引导程序、磁盘引导程序、分区引导程序、操作系统的初始化程序。
启动系统时，首先运行 ROM 中的引导代码（ bootstrap )。为执行某个分区的操作系统的初始化程序，
需要先执行磁盘引导程序以指示引导到哪个分区，然后执行该分区的引导程序，用于引导该分区的操作系统。

2)4个操作的执行顺序依次是磁盘的物理格式化、对磁盘进行分区、逻辑格式化、操作系统的安装。
磁盘只有通过分区和逻辑格式化后才能安装系统和存储信息。物理格式化（又称低级格式化，通常出厂时就已完成）
的作用是为每个磁道划分扇区，安排扇区在磁道中的排列顺序，并对已损坏的磁道和扇区做"坏"标记等。随后将磁盘的整体存储空间划分为
相互独立的多个分区（如 Windows 中划分 C 盘、 D 盘等），这些分区可以用作多种用途，如安装不同的操作系统和应用程序、存储文件等。
然后进行逻辑格式化（又称高级格式化），其作用是对扇区进行逻辑编号、建立逻辑盘的引导记录、文件分配表、文件目录表和数据区等。
最后才是操作系统的安装。

3）由上述分析可知，磁盘扇区的划分是在磁盘的物理格式化操作中完成的，文件系统根目录的建立是在逻辑格式化操作中完成的。

						
						第一章---操作系统引论

===发展过程===
人工操作方式
脱机输入输出：脱离主机情况下进行IO与CPU交互	(联机输入输出：在主机的直接控制下进行交互)
单道批处理系统
多道批处理系统
分时系统：增加人机交互
实时系统：及时性

===微机操作系统(配置在微型机上的os)===
单用户单任务os：CP/M、MS-DOS
单用户多任务os：Windows
多用户多任务os： UNIX，变形：Solaris os Linux os

===操作系统功能===
基本功能：处理机管理功能、存储器管理功能、设备管理功能、文件管理功能
新功能：系统安全、网络功能和服务、支持多媒体

===操作系统与用户之间的接口===
1、用户接口：联机用户接口、脱机用户接口、图形用户接口
2、程序接口：用户程序执行时访问系统资源，使用系统资源的唯一途径；
	早期由汇编编写，只能由汇编程序直接使用系统调用；
	近几年系统调用本身已经采用c语言编写，库函数形式提供
	本质上os提供的还是系统调用而不是库函数

===os结构设计===
无结构os
模块化结构os：os结构清晰，模块-接口法
分层式结构os：将模块-接口法由无序转换为有序
C/S模式
面向对象

===微内核os结构===
1、可以有效支持多处理机运行
2、足够小的内核、基于C/S模式、机制与策略分离、面向对象
3、基本功能：进程管理、低级存储器管理、中断和陷入处理
(有可能用户态、内核态切换频繁)

广义指令：即系统调用命令

内中断、外中断：

						第二章---进程的描述与控制
===os内核===
与硬件紧密相关的模块(中断处理程序)、各种常用设备的驱动程序、运行频率较高的模块(时钟管理、进程调度、模块公用的基本操作)
都安排在紧靠软件的层次中，将它们常驻内存，称为os内核

进程实体/映像：程序段、数据段、PCB
进程状态：活动就绪、活动阻塞、静止就绪、静止阻塞、执行、创建、终止
PCB信息：进程标识符、处理机状态、进程调度信息、进程控制信息

===进程通信方式===
共享存储器系统、管道通信系统、消息传递系统、客户机-服务器系统

===线程===
1、线程本身不拥有系统资源，而是仅有一点必不可少的、能保证独立运行的资源
2、线程控制块TCB
3、多个线程共享该进程所拥有的资源：相同的地址空间、可以访问进程拥有的资源

===线程实现方式===
os中所有进程，不论是系统进程还是用户进程，都是在其内核支持下运行的
内核支持线程：
	1、内核支持下运行，调度是以线程为单位进行的
	2、对于用户的线程切换而言，其模式切换的开销较大
用户级线程：
	1、无需内核支持，调度仍以进程为单位进行的
	2、允许每个进程定制自己的调度算法
	3、线程的实现与平台无关，甚至可以在不支持线程机制的os上实现
	4、大多数系统调用将使进程阻塞，当线程执行一个系统调用时，不仅该线程被阻塞，进程内所有线程都会阻塞
	5、内核每次分配给一个进程的仅有一个cpu，进程中仅有一个线程能执行，其他等待
组合方式：多对一模型、一对一模型、多对多模型(用户级线程与内核线程之间的映射)
	根据用户级线程对应的内核线程数目n，分配n个线程控制块

===进程的封闭性===
是指进程执行的结果只取决于进程本身，不受外界影响

===引入线程后的进程===
1、进程是一个可拥有资源的基本单位
2、进程已不再是可执行的实体，而把线程作为独立运行/调度的基本单位
3、把线程作为调度和分派的基本单位

每个线程都有它自己独立的线程上下文，包括线程ID、栈、栈指针、PC、条件码、通用目的寄存器值；
每个线程和其他线程一起共享进程上下文的剩余部分(用户虚拟地址空间、相同的打开文件的集合)



						第三章---处理机调度与死锁
===响应比===
(等待时间 + 服务时间) / 服务时间

===周转时间===
每个任务执行完毕后的时间的总和

===CPU利用率===
使用时间 / 整个过程完成的时间

===带权周转时间===
周转时间 / 服务时间

===调度层次===
高级调度：将《外存上处于后备队列中的作业》调入内存；用于多道批处理中，分时和实时不设置
低级调度：决定就绪队列中的进程获得处理机
中级调度：也叫内存调度

===调度算法===
先来先服务FCFS(first come first served)：作业、进程调度
短作业优先SJF(short job first)：作业、进程调度
优先级调度PSA(priority scheduling algorithm)：作业、进程调度
高响应比优先HRRN(highest response ratio next)：优先权 = (等待时间 + 要求服务时间) / 要求服务时间 = 响应时间 / 要求服务时间 = Rp

===进程调度===
轮转调度RR(round robin)
优先级调度PSA(priority scheduling algorithm)
多队列调度
多级反馈队列调度

===实时调度===
非抢占式调度：轮转、优先级
抢占式调度：基于时钟周期的优先级抢占调度
最早截止时间优先EDF(earliest deadline first)：非抢用于非周期实时任务，抢用于周期实时任务
最低松弛度优先LLF(least laxity first)：松弛度 = 必须完成时间 - 其本身的运行时间 - 当前时间
优先级倒置PIP(priority inversion problem)--可能出现的问题

===死锁===
产生死锁的必要条件：互斥、请求和保持、不可抢占、循环等待
处理死锁的方法：
预防死锁：破坏死锁条件
避免死锁：(银行家算法)
检测死锁：(死锁定理)资源分配图切去边判断是否死锁
解除死锁：抢占资源、终止进程(终止所有死锁进程、逐个终止进程)

===临界区===
共享变量段的代码程序
===临界变量===
共享数据

===管程===
定义了共享数据结构和各种进程在该数据结构上的全部操作

===PV操作===
分为PV前和PV后操作

===信号量===
互斥信号量定义为1，资源信号量定义为所需个数



						第四章---存储器管理
外存管理放到文件管理一章
===连续分配存储管理方式===
单一连续分配、固定分区分配、动态分区分配、动态可重定位分区分配
基于顺序搜索的动态分区分配算法：首次适应FF(first fit)、循环首次适应NF(next fit)、最佳适应BF(best fit)、最坏适应WF(worst fit)
基于索引搜索的动态分区分配算法：快速适应QF(quick fit)、伙伴系统BS(buddy system)、哈希算法

===覆盖技术===
单道系统下的策略，把用户区分为固定区和若干覆盖区，经常活跃的部分放在固定区，其余部分按调用关系分段
首先将要访问的段放入覆盖区，其他段放在外存，在需要调用前，系统再将其调入覆盖区，替换覆盖区中原有的段
++特点++：
1、不必将进程全部信息装入主存 即可运行，但当同时运行程序的代码量大于主存时仍不能运行；
2、内存中能够更新的地方只有覆盖区的段，不在覆盖区中的段会常驻内存
3、覆盖技术对用户和程序员不透明

===对换/交换===
是改善内存利用率的有效措施，可以直接提高处理机的利用率和系统的吞吐量
分为整体对换和页面(分段)对换，对换整个进程(处于等待的进程调出，准备好的程序调入)
把磁盘分为文件区和对换区

===离散分配存储管理方式===
1、分页存储管理方式：页号P(12 - 31)、位移量W(0 - 12)
	页表始址 + 页号 * 页表长度 -> 该页项在页表中的位置 -> 物理块号 + 页内地址 -> 物理地址
《一级页表表示最高级页表》

2、分段存储管理方式：段号(31 - 16)、段内地址(0 - 15)


3、段页式存储管理方式：用户程序分为若干段，再将每个段分为若干个页，并为每一个段赋予一个段名
		段号S + 段内页号 + 页内地址

===外部碎片===
动态分区产生，在分区的外部
===内部碎片===
固定分区产生，在分区内部



						第五章、虚拟存储器
===虚存特点===
1、运行速度接近于内存速度，而每位的成本却又接近于外存
2、虚拟存储器的实现，建立在离散分配存储管理方式的基础上

===请求分页中的内存分配策略===
固定分配局部置换、可变分配全局置换、可变分配局部置换

===调度算法===
1、页面置换算法：最佳置换(无法实现)、先进先出、最近最久未使用、最少使用、clock置换
2、页面缓冲算法：设置两个链表   空闲页面链表：换出的页放在队尾，换进的页该表为其分配一个块
				修改页面链表：将修改的需要换出的页放在队尾

===Belady异常===
FIFO算法会产生所分配的物理块数增大而页故障数不减反增的异常现象

===工作集===
在某段时间间隔里，进程实际所要访问页面的集合

===计算===
根据虚拟页号 -> 页框号，得到实际地址

虚拟存储最大容量：由计算机地址结构决定的，与主存和外存容量没有必然联系


                                                                             
						第六章、IO系统
===IO系统基本功能===
1、隐藏物理设备的细节
2、与设备的无关性
3、提高处理机和IO设备的利用率
4、对IO设备进行控制
5、确保对设备的正确共享
6、错误处理

===IO软件的层次结构===
1、用户层IO软件
2、设备独立性软件
3、设备驱动程序
4、中断处理程序
5、硬件

===IO系统中各种模块之间的层次视图===P194
1、IO系统的上下接口
	1.1 IO系统接口：是IO系统与上层系统之间的接口，向上层提供对设备进行操作的抽象IO命令，以方便高层对设备的使用
		而上层系统中有：文件系统、虚拟存储器系统以及用户进程等
	1.2 软件/硬件接口：其上面是->中断处理程序和用于却不同设备的设备驱动程序，下面是->各种设备的控制器
	1.3 上下两接口之间：IO系统

===IO系统的层次===
硬件 -> 中断处理程序 -> 设备驱动程序 -> 设备独立性软件 -> 用户层软件

===磁盘调度算法===
扫描算法(SCAN)、循环扫描算法(CSCAN)、NStepSCAN、FSCAN

===控制器===
1、设备并不是直接与CPU进行通信，而是与设备控制器通信
2、功能：
	2.1 控制多个IO设备，实现IO设备和计算机之间的数据交换
	2.2 是CPU和IO设备之间的接口，接受从CPU发来的命令，去控制IO设备
3、类型：控制字符设备的控制器、控制块设备的控制器
4、基本功能：
	4.1 接收和识别命令
	4.2 数据交换
	4.3 标识和报告设备的状态
	4.4 地址识别
	4.5 数据缓冲区
	4.6 差错控制
5、是一种特殊硬件
6、组成：
	6.1 设备控制器与处理机的接口：CPU与控制器之间的通信
	6.2 设备控制器与设备的接口
	6.3 IO逻辑：用于实现对设备的控制(是一组控制线)；CPU利用IO逻辑向控制器发送IO命令，控制器接收IO逻辑进行地址译码

===IO通道===
1、是一种特殊的处理机
2、通道与CPU共享内存，通道程序放在主机内存中
3、通道类型：
	3.1 字节多路通道：含有多个非分配型子通道，每个子通道连接一台IO设备，并控制该设备的IO操作
			这些子通道按时间片轮转方式共享主通道
		弊端：不适合连接于高速设备
	3.2 数组选择通道：可以连接多个高速设备
		弊端：只含有一个分配型子通道，一段时间内只能执行一道通道程序
	3.3 数组多路通道：前两种优点相结合

===中断===
1、外中断(中断)：中断由外部设备引起的
2、内中断(陷入)：由CPU内部事件所引起的

===中断向量表===
1、存放各种设备的中断处理程序地址，表项为中断号
2、表则存放在异常表基址寄存器中

===中断处理程序处理过程===
1、测定是否有未响应的中断信号
2、保护被中断进程的CPU环境
3、转入相应的设备处理程序
4、中断处理
5、恢复CPU的现场并退出中断

===设备驱动程序===
1、是IO系统与设备控制器之间的通信程序
2、功能：
	2.1 接收由与设备无关的软件发来的命令和参数
	2.2 检查用户IO请求的合法性
	2.3 发出IO命令
	2.4 及时响应由设备控制器发来的中断请求，调用中断处理程序进行处理
3、特点：
	3.1 是实现在与设备无关软件和设备控制器之间通信和转换的程序
	3.2 与设备控制器以及IO设备的硬件特性紧密相关
	3.3 与IO设备所采用的IO控制方式紧密相关
	3.4 驱动程序与硬件紧密相关，很多驱动程序固化在ROM中
	3.5 允许可重入
4、设备处理方式
	4.1 为每一类进程设置一个进程，专门用于执行这一类设备的IO操作
	4.2 在整个系统中设置一个IO进程
	4.3 不设置专门的设备处理进程，只为各类设备设置相应的设备驱动程序
5、处理过程：
	5.1 将抽象要求转换为具体要求
	5.2 对服务请求进行校验
	5.3 检查设备的状态
	5.4 传送必要的参数
	5.5 启动IO设备
6、对IO设备的控制方式
	6.1 使用轮询的可编程IO方式
	6.2 使用中断的可编程IO方式
	6.3 直接存储器访问方式
		6.3.1 特点：
			6.3.1.1 数据传输的基本单位是数据块
			6.3.1.2 所传送的数据是从设备直接送入内存的，或者相反
			6.3.1.3 仅在传送一个或多个数据块的开始和结束时，才需CPU干预，整个数据的传送是在控制器下完成的
		6.3.2 组成：主机与DMA控制器接口；DMA控制器与块设备接口；IO控制逻辑
		6.3.3 设置寄存器类型：命令/状态寄存器CR；内存地址寄存器MAR；数据寄存器DR；数据计数器DC
		6.3.4 工作过程：
			 CPU向磁盘控制器发送命令
			 启动DMA控制器进行数据传送：磁盘传送到DMA控制器缓存中，再复制到内存
			 DMA完成后发出中断请求
	6.4 IO通道控制方式(DMA发展)
		1、数据传输基本单位是一连串的块
		2、通道是通过执行通道程序并与设备控制器共同实现对IO设备控制的
		3、通道程序由一系列通道指令所构成
		4、每条指令包含：操作码；内存地址；计数；通道程序结束位P；记录结束标志R
		
===与设备无关的IO软件===
1、设备分配中的数据结构
	1.1 设备控制表DCT：记录设备情况
		包含：设备队列队首指针；忙/闲标志；与设备连接的控制器表指针；重复执行次数
	1.2 控制器控制表COCT：记录控制器情况
	1.3 通道控制表CHCT：
	1.4 系统设备表SDT：记录了系统中全部设备的情况，每个设备占一个表目
		包含：设备类型、设备标识符、设备控制表、设备驱动程序入口地址
2、设备分配算法：先来先服务、优先级高者优先
3、基本的设备分配程序
	3.1 分配设备
	3.2 分配控制器
	3.3 分配通道

+++设备分配的数据结构之间的关系：SDT整个系统只有一张，它记录系统中全部设备的情况，是系统范围的数据结构；每个设备有一张DCT，
	系统为每个设备配置一张DCT，以记录本设备的情况；每个控制器有一张COCT，系统为每个控制器都设置一张用于记录本控制器情况
	的COCT；系统为每个通道配置一张CHCT，以记录通道情况；SDT中每个表目有一个指向DCT的指针，DCT中的每个表目有一个指向COCT
	的指针，COCT中有一个CHCT指针，CHCT中有一个COCt指针

===用户层的IO软件===
假脱机系统(Spooling)
	1、将一台物理设备虚拟为多台逻辑CPU，从而允许用户共享一台主机
	2、由：输入井、输出井；输入缓冲区、输出缓冲区；输入进程、输出进程；井管理程序构成

===共享设备===
指一个作业尚未撤离，另一个作业即可使用，但每个时刻只有一个作业使用


				
						第七章、文件管理
===文件系统===
管理外存文件的系统，在外存中

===文件目录===
外存中

===目录项===
由文件名和指向索引结点(对应一个文件，是文件的描述信息)的指针组成
文件数上限以索引结点为限制

===IO设备===
被os视为特殊文件


===文件系统的层次结构===
用户程序 -> 文件系统接口 -> 对对象操纵和管理的软件集合 -> 对象及其属性



						第八章、磁盘存储器管理
磁盘是存储设备的统称，硬盘是磁性硬盘驱动器的一种具体类型

===磁盘分簇的好处(以簇为基本分配单位)===
1、适应磁盘容量不断增大的情况；
2、减少FAT中的项数，使FAT占用更少内存空间，减少访问FAT的存取开销
3、提高文件访问速度
4、但会造成更大的簇内开销

磁盘地址默认取4B


						第九章、操作系统接口
库函数：是应用程序的一部分，运行在用户空间中；
系统调用：是操作系统的一部分，是内核为用户提供的程序接口，运行在内核空间中；可以访问内核中的栈
	陷阱提供了用户程序和内核之间的一个像过程一样的接口，叫做系统调用
系统开机后，os程序会被自动加载到内存中的系统区，这段区域是RAM
中断后运行的程序是os程序
从用户态到核心态的转换是由硬件完成的
用户态和核心态	与centos中的root和hsf的关系差不多