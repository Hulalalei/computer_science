                                    程序中连接数据库服务器，主要步骤
    1、初始化连接环境
    2、连接mysql服务器
    3、增删改查
    4、事务处理：数据增加、删除、修改
        4.1 成功：提交事务
        4.2 失败：数据回滚
    5、读操作获得结果集
    6、遍历结果集
    7、释放资源
连接数据库服务器的过程，就是tcp socket连接的过程
                                                API
========MYSQL *mysql_init(MYSQL *mysql);
初始化并返回一个新对象，这个对象连接mysql服务器

========MYSQL *mysql_real_connect(
    MYSQL *mysql,               // mysql_init() 函数的返回值
    const char *host,           // mysql服务器的主机地址, 写IP地址即可
                                // localhost, null -> 代表本地连接
    const char *user,           // 连接mysql服务器的用户名, 默认: root 
    const char *passwd,         // 连接mysql服务器用户对应的密码, root用户的密码
    const char *db,             // 要使用的数据库的名字
    unsigned int port,          // 连接的mysql服务器监听的端口
                                // 如果==0, 使用mysql的默认端口3306, !=0, 使用指定的这个端口
    const char *unix_socket,    // 本地套接字, 不使用指定为 NULL
    unsigned long client_flag); // 通常指定为0
连接失败返回NULL, 成功返回第一个参数

========int mysql_query(MYSQL *mysql, const char *query);
参数:
    - mysql: mysql_real_connect() 的返回值
    - query: 一个可以执行的sql语句, 结尾的位置不需要加 ;
返回值:
    - 如果查询成功，返回0。如果是查询, 结果集在mysql 对象中
    - 如果出现错误，返回非0值

========MYSQL_RES *mysql_store_result(MYSQL *mysql);
// 将结果集从 mysql(参数) 对象中取出
// MYSQL_RES 对应一块内存, 里边保存着这个查询之后得到的结果集
// 如何将行和列的数据从结果集中取出, 需要使用其他函数
// 返回值: 具有多个结果的MYSQL_RES结果集合。如果出现错误，返回NULL。 


========unsigned int mysql_num_fields(MYSQL_RES *result);
// 结果集中列的个数
// 参数: 调用 mysql_store_result() 得到的返回值
// 返回值: 结果集中的列数

========MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES *result);
// 参数: 调用 mysql_store_result() 得到的返回值
// 返回值: MYSQL_FIELD* 指向一个结构体
// 通过查询官方文档, 返回是一个结构体的数组
// 通过这个函数得到结果集中所有列的名字

// mysql.h
// 结果集中的每一个列对应一个 MYSQL_FIELD
typedef struct st_mysql_field {
  char *name;                 /* 列名-> 字段的名字 */
  char *org_name;             /* Original column name, if an alias */
  char *table;                /* Table of column if column was a field */
  char *org_table;            /* Org table name, if table was an alias */
  char *db;                   /* Database for table */
  char *catalog;              /* Catalog for table */
  char *def;                  /* Default value (set by mysql_list_fields) */
  unsigned long length;       /* Width of column (create length) */
  unsigned long max_length;   /* Max width for selected set */
  unsigned int name_length;
  unsigned int org_name_length;                                                                                        
  unsigned int table_length;
  unsigned int org_table_length;
  unsigned int db_length;
  unsigned int catalog_length;
  unsigned int def_length;
  unsigned int flags;         /* Div flags */
  unsigned int decimals;      /* Number of decimals in field */
  unsigned int charsetnr;     /* Character set */
  enum enum_field_types type; /* Type of field. See mysql_com.h for types */
  void *extension;
} MYSQL_FIELD;

========unsigned long *mysql_fetch_lengths(MYSQL_RES *result);
/* 
返回结果集内当前行的列的长度:
    1. 如果打算复制字段值，使用该函数能避免调用strlen()。
    2. 如果结果集包含二进制数据，必须使用该函数来确定数据的大小，原因在于，对于包含Null字符的任何字段，strlen()将返回错误的结果。
*/
参数: 
    - result: 通过查询得到的结果集
返回值:
    - 无符号长整数的数组表示各列的大小。如果出现错误，返回NULL

========MYSQL_ROW mysql_fetch_row(MYSQL_RES *result);
typedef char** MYSQL_ROW;
// 遍历结果集的下一行 
// 如果想遍历整个结果集, 需要对该函数进行循环调用
// 返回值是二级指针, char** 指向一个什么类型的内存呢?
//    -- 指向一个指针数组, 类型是数组,里边的每个元素都是指针, char* 类型
//    -- char* []; 数组中的字符串对应的一列数据

// 需要对 MYSQL_ROW 遍历就可以得到每一列的值
// 如果要遍历整个结果集, 需要循环调用这个函数

参数: 
    - result: 通过查询得到的结果集
返回值: 
    - 成功: 得到了当前记录中每个字段的值
    - 失败: NULL, 说明数据已经读完了

========void mysql_free_result(MYSQL_RES *result);
// 释放结果集

========void mysql_close(MYSQL *mysql);
// 关闭mysql实例

========
// mysql中默认会进行事务的提交
// 因为自动提交事务, 会对我们的操作造成影响
// 如果我们操作的步骤比较多, 集合的开始和结束需要用户自己去设置, 需要改为手动方式提交事务
my_bool mysql_autocommit(MYSQL *mysql, my_bool mode) 
参数:
    如果模式为“1”，启用autocommit模式；如果模式为“0”，禁止autocommit模式。
返回值
    如果成功，返回0，如果出现错误，返回非0值。

// 事务提交
my_bool mysql_commit(MYSQL *mysql);
返回值: 成功: 0, 失败: 非0
    
// 数据回滚
my_bool mysql_rollback(MYSQL *mysql) 
返回值: 成功: 0, 失败: 非0

========
// 返回错误的描述
const char *mysql_error(MYSQL *mysql);
// 返回错误的编号
unsigned int mysql_errno(MYSQL *mysql);




git config --global url."https://githubfast.com/".insteadOf "git@github.com:"
成功后输入cat ~/.gitconfig
查看结果如下ok
[http]
	sslCAInfo = /home/slvher/tools/https-ca/cacert.pem
[url "git@github.com:"]
	insteadOf = https://github.com/